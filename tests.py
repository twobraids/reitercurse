import unittest
from collections import Sequence

from reitercurse import execute_iteratively

i_in_out = []

from functools import wraps


def memo(fn):
    @wraps(fn)
    def wrapped(n):
        try:
            if n in fn.cache:
                return fn.cache[n]
        except AttributeError:
            fn.cache = {}
        result = fn(n)
        fn.cache[n] = result
        return result
    return wrapped


calls = 0

def recursion_watch(fn):
    @wraps(fn)
    def recursion_detector(*args, **kwargs):
        global calls
        calls += 1
        try:
            return fn(*args, **kwargs)
        finally:
            calls -= 1
            # the decorator execute_iteratively actually doesn't entirely
            # eliminate recursion.  It limits it to one level.  so this test
            # must account for allowing one level
            if calls > 1:
                calls = 0
                raise Exception('recursion is not allowed')
    return recursion_detector

def execute_with_recursion_watch(fn, *args, **kwargs):
    global calls
    calls = 0
    return fn(*args, **kwargs)

class TestCase(unittest.TestCase):

    def test_recursion_watch_obvious_recursion(self):
        @recursion_watch
        def fact(n):
            if n < 2:
                return 1
            else:
                return fact(n - 1) * n
        execute_with_recursion_watch(
            self.assertRaises,
            Exception,
            fact,
            20
        )

    def test_recursion_watch_test_order_of_decorators(self):
        @recursion_watch
        @execute_iteratively
        def fact(n):
            if n < 2:
                return 1
            else:
                return fact(n - 1) * n
        execute_with_recursion_watch(fact, 20)

        @execute_iteratively
        @recursion_watch
        def fact(n):
            if n < 2:
                return 1
            else:
                return fact(n - 1) * n
        execute_with_recursion_watch(fact, 20)


    def test_execute_iteratively_with_fact(self):
        @recursion_watch
        @execute_iteratively
        def ifact(n):
            if n < 2:
                return 1
            else:
                return ifact(n - 1) * n

        def rfact(n):
            if n < 2:
                return 1
            else:
                return rfact(n - 1) * n

        for n in range(100):
            self.assertEqual(ifact(n), rfact(n))

        self.assertEqual(
            ifact(2000),

        )

    def test_execute_iteratively_with_fact_and_deep_failure(self):
        force_an_error = True

        @recursion_watch
        @execute_iteratively
        def ifact(n):
            if n < 2:
                if force_an_error:
                    raise Exception('deep failure')
                else:
                    return 1
            else:
                return ifact(n - 1) * n

        def rfact(n):
            if n < 2:
                return 1
            else:
                return rfact(n - 1) * n

        try:
            x = ifact(21)
        except Exception:
            # we expect this error
            pass

        force_an_error = False

        # does it still work after an error?
        self.assertEqual(ifact(4), rfact(4))


    def test_execute_iteratively_with_fib(self):
        @recursion_watch
        @execute_iteratively
        def ifib(n):
            if n < 3:
                return n
            return ifib(n - 1) + ifib(n - 2)

        @memo
        def rfib(n):
            if n < 3:
                return n
            return rfib(n - 1) + rfib(n - 2)

        for n in range(100):
            r1 = execute_with_recursion_watch(ifib, n)
            r2 = rfib(n)
            self.assertEqual(r1, r2)

    def test_execute_iteratively_with_indirect_fib(self):
        @recursion_watch
        @execute_iteratively
        def ifib1(n):
            if n < 3:
                return n
            return ifib1(n - 1) + ifib2(n - 2)

        @execute_iteratively
        def ifib2(n):
            if n < 3:
                return n
            return ifib2(n - 1) + ifib1(n - 2)

        @memo
        def rfib(n):
            if n < 3:
                return n
            return rfib(n - 1) + rfib(n - 2)

        for n in range(100):
            r1 = execute_with_recursion_watch(ifib1, n)
            r2 = rfib(n)
            self.assertEqual(r1, r2)

    def test_execute_iteratively_mutable_argument(self):
        @recursion_watch
        @execute_iteratively
        def i_quicksort(value_sequence):
            if not value_sequence:
                return []

            pivots = [x for x in value_sequence if x == value_sequence[0]]
            lesser = i_quicksort([x for x in value_sequence if x < value_sequence[0]])
            greater = i_quicksort([x for x in value_sequence if x > value_sequence[0]])

            return lesser + pivots + greater

        def r_quicksort(arr):
            if not arr:
                return []

            pivots = [x for x in arr if x == arr[0]]
            lesser = r_quicksort([x for x in arr if x < arr[0]])
            greater = r_quicksort([x for x in arr if x > arr[0]])

            return lesser + pivots + greater

        # assert iterative and recursive return same value
        self.assertEqual(
            i_quicksort(range(100, 0, -1)),
            r_quicksort(range(100, 0, -1))
        )

        # assert iterative works where recursive fails
        self.assertTrue(i_quicksort(range(1111, 0, -1)))
        # not sure why this RuntimeError is not caught by the assert
        #self.assertRaises(RuntimeError, r_quicksort(range(1111, 0, -1)))

